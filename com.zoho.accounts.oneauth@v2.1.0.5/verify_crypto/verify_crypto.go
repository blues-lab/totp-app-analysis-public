package main

import (
	"crypto/sha256"
	"encoding/base32"
	"fmt"

	"github.com/blues-lab/totp-app-analysis-public/utils"
)

const (
	password = "rRmhyojrhMyAFFD2_sEdXwiyJfTexRBr"

	// Copy/pasted from the network traffic. The JSON object has field
	// `passphrase` with child field `private_key`.
	appPrivateKeyCiphertextBase

	// Copy/pasted from the network traffic. There is a JSON array named
	// `tpsecret_all` and each object in the array has a field called `app_secret`.
	qrCode1TotpCiphertextBase32 = "GLUEKWXJQCWKMIORCAB3HJLGVO4QKD7FCBQRKYKT2UFYWOAZO54DYQPLXGLNL5FVYOBWJOMB7XTVKZLGH2S2IRPDB6YUT6RXDYMNMX6M4ZIGLCMTGL2HDHWL2GWHZM66"
	qrCode2TotpCiphertextBase32 = "GLUEKWXJQCWKMIORCAB3HJLGVO4QKD7FCBQRKYKT2UFYWOAZO54DYQPLXGLNL5FVYOBWJOMB7XTVLU2INMHOYV7LSYJOWPFHE4LPEYOM4ZIGLCMTGL2HDHWL2GWHZM66"
)

func decryptTotpSecret(
	password string,
	appPrivateKeyCiphertextBase32 string,
	totpCiphertextBase32 string) []byte {

	passwordBytes := []byte(password)

	// The app uses a single round of SHA256 as a KDF.
	keyDerivedFromPassword := sha256.Sum256(passwordBytes)

	// Base32 decode the app private key.
	privateKeyCiphertextBytes, err := base32.StdEncoding.DecodeString(appPrivateKeyCiphertextBase32)
	if err != nil {
		panic(err)
	}

	// Decrypt the app private key.
	appPrivateKeyBytes := utils.DecryptAesEcbPaddedWithPKCS7(
		privateKeyCiphertextBytes,
		keyDerivedFromPassword[:])

	// The app uses a single round of SHA256 as a KDF. Derive the TOTP backup key
	// from the decrypted app private key. This unusual multi-level encryption
	// does not provide any additional security.
	totpBackupKeyBytes := sha256.Sum256(appPrivateKeyBytes)

	totpCiphertextBytes, err := base32.StdEncoding.DecodeString(totpCiphertextBase32)
	if err != nil {
		panic(err)
	}

	// Decrypt the TOTP backup.
	totpPlaintextBytes := utils.DecryptAesEcbPaddedWithPKCS7(
		totpCiphertextBytes,
		totpBackupKeyBytes[:])

	return totpPlaintextBytes
}

func main() {
	totpSecret1 := decryptTotpSecret(
		password,
		appPrivateKeyCiphertextBase32,
		qrCode1TotpCiphertextBase32)
	fmt.Printf("TOTP Secret 1 = %s\n", totpSecret1)

	totpSecret2 := decryptTotpSecret(
		password,
		appPrivateKeyCiphertextBase32,
		qrCode2TotpCiphertextBase32)
	fmt.Printf("TOTP Secret 2 = %s\n", totpSecret2)
}
